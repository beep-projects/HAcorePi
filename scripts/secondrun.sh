#!/bin/bash
#
# Copyright (c) 2021-2024, The beep-projects contributors
# this file originated from https://github.com/beep-projects
# Do not remove the lines above.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/
#
# This file is inspired by the firstrun.sh, generated by the Raspberry Pi Imager https://www.raspberrypi.org/software/
#
# This file will be called after the network has been configured by firstrun.sh
# It updates the system, installs suricata, elasticsearch, logstash and kibana,
# This script downloads and configures a lot of stuff, so it will take a while to run
# For a full description see https://github.com/beep-projects/SuricataPi/readme.md
#

#######################################
# Checks if any user is holding one of the various lock files used by apt
# and waits until they become available. 
# Warning, you might get stuck forever in here
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
function waitForApt() {
  while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
   echo ["$(date +%T)"] waiting for access to apt lock files ...
   sleep 1
  done
}

#######################################
# Checks if internet can be accessed
# and waits until it becomes available. 
# Warning, you might get stuck forever in here
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
function waitForInternet() {
  until curl --output /dev/null --silent --head --fail http://www.google.com; do
    echo ["$(date +%T)"] waiting for internet access ...
    sleep 1
  done
}

#######################################
# Print error message.
# Globals:
#   None
# Arguments:
#   $1 = Error message
#   $2 = return code (optional, default 1)
# Outputs:
#   Prints an error message to stderr
#######################################
function error() {
    printf "%s\n" "${1}" >&2 ## Send message to stderr.
    exit "${2-1}" ## Return a code specified by $2, or 1 by default.
}

# redirect output to 'secondrun.log':
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>/boot/secondrun.log 2>&1

CURRENT_USER=$( whoami )
echo "START secondrun.sh as user: ${CURRENT_USER}"
echo "current directory is $( pwd )"
BOOT_PATH=$(dirname "$(realpath -s "${BASH_SOURCE[0]}")")

# the following variables should be set by firstrun.sh
#VARIABLE_NAME=COPY_VARIABLE_NAME_HERE

# update the system
waitForInternet
echo "updating the system"
waitForApt
sudo apt update --allow-releaseinfo-change # bookworn introduced an issue with the release files being not valid
waitForApt
sudo apt full-upgrade -y
# do it again, because it seems to fix the bookworm release file issues
sudo apt update --allow-releaseinfo-change # bookworn introduced an issue with the release files being not valid
waitForApt
sudo apt full-upgrade -y

# change to a directory on the root partition to do all the build stuff there
# doing that on the boot partition might cause problems, e.g. when the build script tries to create hard links to the root partition
echo "changing to home directory of current user"
cd ~
# install latest Python version, homeassistant is quite demanding on this
eval "${BOOT_PATH}/install_latest_python.sh"
# install homeassistant core
eval "${BOOT_PATH}/install_hacore.sh"

# install mosquitto as MQTT broker
sudo apt install -y mosquitto mosquitto-clients
# create file for credentials
sudo touch /etc/mosquitto/credentials
# create default user
sudo mosquitto_passwd -b /etc/mosquitto/credentials mqtt-beep mqtt-projects
# create config file
sudo tee /etc/mosquitto/conf.d/local.conf > /dev/null <<'EOF'
listener 1883
allow_anonymous false
password_file /etc/mosquitto/credentials
EOF
# after everything is set up you can debug all messages sent to this broker via
# mosquitto_sub -h localhost -t \# -u mqtt-beep -P mqtt-projects
# just to be sure
sudo systemctl enable mosquitto
# restart service
sudo systemctl restart mosquitto.service

# restore backup if present
count=$( ls -1 "${BOOT_PATH}/"*.tar 2>/dev/null | wc -l )
if [ $count != 0 ]; then
  # find the newest backupfile by checking the date in each tar
  latestBackupFile=$( for f in ${BOOT_PATH}/*.tar; do echo -n $( tar -tvf "$f" | grep homeassistant.tar.gz | tr -s " " | cut -d " " -f4,5 ;); echo " ${f}"; done | sort | tail -1 | cut -d " " -f3 )
  echo "restore backup found at ${latestBackupFile}"
  tar -xOf "${latestBackupFile}" "homeassistant.tar.gz" | tar --strip-components=1 -zxf - -C /home/homeassistant/.homeassistant
else
  echo "no backup found to restore"
  # if there is no backup, configure SSL
  ETH0_IP=$( ifconfig eth0 | awk '/inet / {print $2}' )
  openssl req -sha256 -addext "subjectAltName = IP:${ETH0_IP}" -newkey rsa:4096 -nodes -keyout privkey.pem -x509 -days 730 -out fullchain.pem
  cp *.pem /home/homeassistant/.homeassistant/
  chown homeassistant:homeassistant /home/homeassistant/.homeassistant/*.pem
  chmod 600 /home/homeassistant/.homeassistant/*.pem
  #if [[ $( grep -q "http:" /home/homeassistant/.homeassistant/configuration.yaml ) -eq 0 ]]; then
  if ! grep -q "http:" /home/homeassistant/.homeassistant/configuration.yaml ; then
    cat <<EOT >> /home/homeassistant/.homeassistant/configuration.yaml

http:
  ssl_certificate: /home/homeassistant/.homeassistant/fullchain.pem
  ssl_key: /home/homeassistant/.homeassistant/privkey.pem

EOT
  fi
fi

# do it again, because it seems to fix the bookworm release file issues
sudo apt update --allow-releaseinfo-change # bookworn introduced an issue with the release files being not valid
waitForApt
sudo apt full-upgrade -y

#clean up
echo "remove autoinstalled packages" 
waitForApt
echo "sudo apt -y autoremove"
sudo apt -y autoremove

echo "add run ${BOOT_PATH}/thirdrun.sh command to cmdline.txt file for next reboot"
sudo sed -i '$s|$| systemd.run='"${BOOT_PATH}"'/thirdrun.sh systemd.run_success_action=reboot systemd.unit=kernel-command-line.target\n|' "${BOOT_PATH}/cmdline.txt"

#disable the service that started this script
sudo systemctl disable secondrun.service
echo "DONE secondrun.sh, rebooting the system"

sleep 2
sudo reboot
